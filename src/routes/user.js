const router = require("express").Router();
const {
  register,
  login,
  getAll,
  getOne,
  editOne,
  deleteOne,
} = require("../controllers/user");
const {
  validateParams,
  validateRegister,
  validateLogin,
} = require("../validations/user");

const verifyToken = require("../utils/verifyToken");
const permission = require("../utils/permission");

// /**
//  * @swagger
//  * /api/users/login:
//  *  post:
//  *    summary: Returns generated token for access to the system
//  *    tags:
//  *      - Users
//  *    requestBody:
//  *      required: true
//  *      content:
//  *        aplication/json:
//  *          schema:
//  *            type: object
//  *            properties:
//  *              phone:
//  *                type: string
//  *              password:
//  *                type: string
//  *    responses:
//  *      200:
//  *        description: Success for access
//  *        content:
//  *          application/json:
//  *            schema:
//  *              type: object
//  *              properties:
//  *                msg:
//  *                  type: string
//  *                token:
//  *                  type: string
//  *      400:
//  *        description: Bad Request, expected proper credentials from user
//  *      401:
//  *        description: The client lacks proper authentication credentials or has provided invalid credentials
//  *      500:
//  *        description: The server encountered an unexpected condition that prevented it from fulfilling the request
//  */

router.route("/login").post(validateLogin, login);

router.use(verifyToken);

// /**
//  * @swagger
//  * /api/users/register:
//  *  post:
//  *    summary: Returns new created user
//  *    tags:
//  *      - Users
//  *    requestBody:
//  *      required: true
//  *      content:
//  *        aplication/json:
//  *          schema:
//  *              $ref: '#/components/schemas/User'
//  *    responses:
//  *      201:
//  *        description: New user created
//  *        content:
//  *          application/json:
//  *            schema:
//  *              type: object
//  *              items:
//  *                $ref: '#/components/schemas/User'
//  *      403:
//  *        description: Access to the requested resource is forbidden
//  *      500:
//  *        description: The server encountered an unexpected condition that prevented it from fulfilling the request
//  */

router
  .route("/register")
  .post(permission("user", ["write"]), validateRegister, register);

// /**
//  * @swagger
//  * /api/users:
//  *  get:
//  *    summary: Returns list of the users
//  *    tags:
//  *      - Users
//  *    responses:
//  *      200:
//  *        description: Success getting list of the users
//  *        content:
//  *          application/json:
//  *            schema:
//  *              type: array
//  *              items:
//  *                $ref: '#/components/schemas/User'
//  *      403:
//  *        description: Access to the requested resource is forbidden
//  *      500:
//  *        description: The server encountered an unexpected condition that prevented it from fulfilling the request
//  */

router.route("/").get(permission("user", ["read"]), getAll);

// /**
//  * @swagger
//  * /api/users/{id}:
//  *  get:
//  *    summary: Returns specified user
//  *    tags:
//  *      - Users
//  *    parameters:
//  *      - in: path
//  *        name: id
//  *        description: Specify hexadecimal string user identifier
//  *        required: true
//  *        schema:
//  *          type: string
//  *          required: true
//  *          description: Hexadecimal string generated by mongodb
//  *    responses:
//  *      200:
//  *        description: Success to getting specified user based on user id
//  *        content:
//  *          application/json:
//  *            schema:
//  *              type: object
//  *              items:
//  *                $ref: '#/components/schemas/User'
//  *      500:
//  *        description: The server encountered an unexpected condition that prevented it from fulfilling the request
//  */

router.route("/:id").get(permission("user", ["read"]), validateParams, getOne);

// /**
//  * @swagger
//  * /api/users/{id}:
//  *  patch:
//  *    summary: Returns updated user
//  *    tags:
//  *      - Users
//  *    parameters:
//  *     -  in: path
//  *        name: id
//  *        description: Specify hexadecimal string user identifier
//  *        required: true
//  *        schema:
//  *          type: string
//  *          required: true
//  *          description: Hexadecimal string generated by mongodb
//  *    requestBody:
//  *      required: true
//  *      content:
//  *        aplication/json:
//  *          schema:
//  *              $ref: '#/components/schemas/User'
//  *
//  *    responses:
//  *      200:
//  *        description: Updated user credentials
//  *        content:
//  *          application/json:
//  *            schema:
//  *                $ref: '#/components/schemas/User'
//  *      500:
//  *        description: The server encountered an unexpected condition that prevented it from fulfilling the request
//  */

router
  .route("/:id")
  .patch(permission("user", ["update"]), validateParams, editOne);

// /**
//  * @swagger
//  * /api/users/{id}:
//  *  delete:
//  *    summary: Returns deleted user credentials
//  *    tags:
//  *      - Users
//  *    parameters:
//  *      - in: path
//  *        name: id
//  *        description: Specify hexadecimal string user identifier
//  *        required: true
//  *        schema:
//  *          type: string
//  *          required: true
//  *          description: Hexadecimal string generated by mongodb
//  *    responses:
//  *      200:
//  *        description: Specified user successfully deleted
//  *        content:
//  *          application/json:
//  *            schema:
//  *                $ref: '#/components/schemas/User'
//  *      500:
//  *        description: The server encountered an unexpected condition that prevented it from fulfilling the request
//  */

router
  .route("/:id")
  .delete(permission("user", ["delete"]), validateParams, deleteOne);

module.exports = router;
